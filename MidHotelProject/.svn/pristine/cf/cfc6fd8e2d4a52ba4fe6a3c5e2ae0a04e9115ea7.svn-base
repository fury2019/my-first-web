package com.Hotel.controller.member;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import javax.servlet.*;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.*;
import com.google.gson.*;

@WebServlet("/Cuscheck.do")
public class Cuscheck extends HttpServlet {
	private static final long serialVersionUID = 1L;

    private static final String IAMPORT_API_KEY = "YOUR_API_KEY";
    private static final String IAMPORT_API_SECRET = "YOUR_API_SECRET";
    
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }


    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("application/json; charset=UTF-8");

        BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
        StringBuilder sb = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            sb.append(line);
        }
        reader.close();

        JsonObject requestBody = JsonParser.parseString(sb.toString()).getAsJsonObject();
        String impUid = requestBody.get("imp_uid").getAsString();

        if (impUid == null || impUid.isEmpty()) {
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            response.getWriter().write("{\"error\":\"Invalid imp_uid\"}");
            return;
        }

        // 1. Iamport API 인증 토큰 요청
        String token = getIamportToken();
        if (token == null) {
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"error\":\"Failed to get Iamport token\"}");
            return;
        }

        // 2. imp_uid를 통해 본인인증 정보 요청
        JsonObject userInfo = getUserInfoFromIamport(token, impUid);
        if (userInfo == null) {
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"error\":\"Failed to retrieve user information\"}");
            return;
        }

        // 3. 응답 데이터 반환
        response.getWriter().write(userInfo.toString());
    }

    private String getIamportToken() throws IOException {
        URL url = new URL("https://api.iamport.kr/users/getToken");
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("POST");
        conn.setRequestProperty("Content-Type", "application/json");
        conn.setDoOutput(true);

        JsonObject body = new JsonObject();
        body.addProperty("imp_key", "imp03127688");
        body.addProperty("imp_secret", "yinTYMUdaCDq4jMix9RMsjVx0LuDvNOQmrrjX2miRFZ46YCMRpGKfWWb8CY761BVPD8VEerP7AqY9L6x");

        OutputStream os = conn.getOutputStream();
        os.write(body.toString().getBytes());
        os.flush();

        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        StringBuilder sb = new StringBuilder();
        String line;
        while ((line = br.readLine()) != null) {
            sb.append(line);
        }
        br.close();

        JsonObject response = JsonParser.parseString(sb.toString()).getAsJsonObject();
        return response.get("response").getAsJsonObject().get("access_token").getAsString();
    }

    private JsonObject getUserInfoFromIamport(String token, String impUid) throws IOException {
        URL url = new URL("https://api.iamport.kr/certifications/" + impUid);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        conn.setRequestProperty("Authorization", token);

        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        StringBuilder sb = new StringBuilder();
        String line;
        while ((line = br.readLine()) != null) {
            sb.append(line);
        }
        br.close();

        JsonObject response = JsonParser.parseString(sb.toString()).getAsJsonObject();
        return response.get("response").getAsJsonObject();
    }
}
