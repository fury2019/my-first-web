package com.Hotel.controller.HotelNearbySpots;

import java.io.IOException;
import java.util.List;

import com.Hotel.service.HotelNearbySpots.HotelNearbySpotsService;
import com.Hotel.service.HotelNearbySpots.IHotelNearbySpotsService;
import com.Hotel.vo.Hotel_PlaceVO;
import com.Hotel.vo.MemberVO;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

@WebServlet("/HotelNearbySpots")
public class HotelNearbySpots extends HttpServlet {
    private static final long serialVersionUID = 1L;

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // 클라이언트로부터 호텔 ID를 받음
        String hotelId = request.getParameter("hotelId");
        
        // hotelId가 없거나 비어 있으면 오류 응답 전송
        if (hotelId == null || hotelId.isEmpty()) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "호텔 ID가 제공되지 않았습니다.");
            return;
        }
        System.out.println("hotelId: " + hotelId);
        
        // `placeId`와 `memId`를 받아서 좋아요 기능 처리
        String placeId = request.getParameter("placeId");

        // 세션에서 memId 가져오기
        HttpSession session = request.getSession();

        // 세션이나 로그인 정보가 없으면 에러 응답
        if (session == null || session.getAttribute("loginCode") == null) {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "로그인이 필요합니다.");
            return;
        }

        // 로그인 정보에서 memId 가져오기
        String memId = ((MemberVO) session.getAttribute("loginCode")).getMem_id();
        
        if (placeId != null && memId != null) {
        	//좋아요 기능 처리 (MyBatis호출)
        	IHotelNearbySpotsService service = HotelNearbySpotsService.getInstance();
        	boolean isSuccess = service.updateLikeCount(placeId, memId);
        	
        	if(!isSuccess) {
        		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "좋아요 처리에 실패했습니다.");
        		return;
        	}
        }
        
        // 서비스 객체 가져오기
        IHotelNearbySpotsService service = HotelNearbySpotsService.getInstance();

        // 특정 호텔 근처 명소 가져오기
        List<Hotel_PlaceVO> spots = service.getPlacesByHotelId(hotelId);
        
        for(Hotel_PlaceVO hotelplaceVo : spots) {
        	hotelplaceVo.setPlaceLikeVo(
        			service.selectPlacesLikeList(hotelplaceVo.getPlace_id()));
        }
        // 호텔에 관련된 명소들의 좋아요 수를 업데이트하고 결과를 가져오기 (hotel_like에서)
//        List<Hotel_PlaceVO> like = service.updatePlacesLikeCount(hotelId);  // 여기서 호출

        // 명소 리스트를 요청 속성에 설정
        request.setAttribute("spots", spots);
        
        // 좋아요수
//        request.setAttribute("like", like);

        // 결과를 보여줄 JSP로 포워딩
        request.getRequestDispatcher("/jsp/displaySpots.jsp").forward(request, response);
    
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doGet(request, response); // POST 요청도 GET 요청과 동일하게 처리
    }
}
